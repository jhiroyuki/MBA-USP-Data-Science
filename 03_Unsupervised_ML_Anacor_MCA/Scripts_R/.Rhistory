Colesterol > quantile(Colesterol, 0.75, na.rm = T) ~ "maior_colesterol"))
dados_cor <- dados_cor %>%
mutate(Categ_BC_Max = case_when(BC_Max <= quantile(BC_Max, 0.25, na.rm = T) ~ "menor_BC_Max",
BC_Max > quantile(BC_Max, 0.25, na.rm = T) & BC_Max <= quantile(BC_Max, 0.75, na.rm = T) ~ "BC_Max_médio",
BC_Max > quantile(BC_Max, 0.75, na.rm = T) ~ "maior_BC_Max"))
# Vamos remover as variáveis que não utilizaremos (quantitativas)
dados_cor <- dados_cor %>%
select(-Idade, -PS_Descanso, -Colesterol, -BC_Max)
# A função para a criação da ACM pede que sejam utilizados "fatores"
dados_cor <- as.data.frame(unclass(dados_cor), stringsAsFactors=TRUE)
# Tabelas de contingência (todas apresentam associação com alguma variável?)
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Sexo,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Tipo_Dor_Peito,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Açucar_Sangue,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$ECG_Descanso,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Angina_Exerc,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_Idade,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_PS_Desc,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_Colest,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_BC_Max,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
# Vamos gerar a ACM
ACM <- dudi.acm(dados_cor, scannf = FALSE)
# Analisando as variâncias de cada dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
paste0(round(perc_variancia,2),"%")
# Quantidade de categorias por variável
quant_categorias <- apply(dados_cor,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = CS1, y = CS2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# Consolidando as coordenadas-padrão obtidas por meio da matriz de Burt
df_ACM_B <- data.frame(ACM$co, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM_B %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Comp1, y = Comp2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# É possível obter as coordenadas das observações
df_coord_obs <- ACM$li
# Plotando o mapa perceptual
df_coord_obs %>%
ggplot(aes(x = Axis1, y = Axis2, color = dados_cor$Doença_Card)) +
geom_point() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%")),
color = "Doença Cardíaca") +
theme_bw()
# Plotando o mapa perceptual
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = CS1, y = CS2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# Instalação e carregamento dos pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
"knitr", "kableExtra",
"sjPlot",
"FactoMineR",
"amap",
"ade4",
"readxl")
# Instalação e carregamento dos pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
"knitr", "kableExtra",
"sjPlot",
"FactoMineR",
"amap",
"ade4",
"readxl")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Importando a base de dados
dados_cor <- read_excel("dados_cor_acm.xlsx")
# Vamos categorizar as variáveis quanti (por critério estatístico)
dados_cor <- dados_cor %>%
mutate(Categ_Idade = case_when(Idade <= quantile(Idade, 0.25, na.rm = T) ~ "menores_idades",
Idade > quantile(Idade, 0.25, na.rm = T) & Idade <= quantile(Idade, 0.75, na.rm = T) ~ "idades_médias",
Idade > quantile(Idade, 0.75, na.rm = T) ~ "maiores_idades"))
dados_cor <- dados_cor %>%
mutate(Categ_PS_Desc = case_when(PS_Descanso <= quantile(PS_Descanso, 0.25, na.rm = T) ~ "PS_descanso_baixo",
PS_Descanso > quantile(PS_Descanso, 0.25, na.rm = T) & PS_Descanso <= quantile(PS_Descanso, 0.75, na.rm = T) ~ "PS_descanso_médio",
PS_Descanso > quantile(PS_Descanso, 0.75, na.rm = T) ~ "PS_descanso_alto"))
dados_cor <- dados_cor %>%
mutate(Categ_Colest = case_when(Colesterol <= quantile(Colesterol, 0.25, na.rm = T) ~ "menor_colesterol",
Colesterol > quantile(Colesterol, 0.25, na.rm = T) & Colesterol <= quantile(Colesterol, 0.75, na.rm = T) ~ "colesterol_médio",
Colesterol > quantile(Colesterol, 0.75, na.rm = T) ~ "maior_colesterol"))
dados_cor <- dados_cor %>%
mutate(Categ_BC_Max = case_when(BC_Max <= quantile(BC_Max, 0.25, na.rm = T) ~ "menor_BC_Max",
BC_Max > quantile(BC_Max, 0.25, na.rm = T) & BC_Max <= quantile(BC_Max, 0.75, na.rm = T) ~ "BC_Max_médio",
BC_Max > quantile(BC_Max, 0.75, na.rm = T) ~ "maior_BC_Max"))
# Vamos remover as variáveis que não utilizaremos (quantitativas)
dados_cor <- dados_cor %>%
select(-Idade, -PS_Descanso, -Colesterol, -BC_Max)
# A função para a criação da ACM pede que sejam utilizados "fatores"
dados_cor <- as.data.frame(unclass(dados_cor), stringsAsFactors=TRUE)
# Tabelas de contingência (todas apresentam associação com alguma variável?)
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Sexo,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Tipo_Dor_Peito,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Açucar_Sangue,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$ECG_Descanso,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Angina_Exerc,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_Idade,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_PS_Desc,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_Colest,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_cor$Doença_Card,
var.col = dados_cor$Categ_BC_Max,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
# Vamos gerar a ACM
ACM <- dudi.acm(dados_cor, scannf = FALSE)
# Analisando as variâncias de cada dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
paste0(round(perc_variancia,2),"%")
# Quantidade de categorias por variável
quant_categorias <- apply(dados_cor,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = CS1, y = CS2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# Consolidando as coordenadas-padrão obtidas por meio da matriz de Burt
df_ACM_B <- data.frame(ACM$co, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM_B %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Comp1, y = Comp2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# É possível obter as coordenadas das observações
df_coord_obs <- ACM$li
# Plotando o mapa perceptual
df_coord_obs %>%
ggplot(aes(x = Axis1, y = Axis2, color = dados_cor$Doença_Card)) +
geom_point() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%")),
color = "Doença Cardíaca") +
theme_bw()
# Instalação e carregamento dos pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
"knitr", "kableExtra",
"sjPlot",
"FactoMineR",
"amap",
"ade4")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Importando a base de dados
load(file = "gestao_municipal.RData")
# Tabelas de frequência das variáveis
summary(gestao_municipal)
View(gestao_municipal)
# Tabela de contingência com frequências absolutas observadas
sjt.xtab(var.row = gestao_municipal$ano,
var.col = gestao_municipal$avaliação,
show.exp = TRUE,
encoding = "UTF-8")
# Tabela de contingência "base" para informações de resíduos
tabela_contingencia <- table(gestao_municipal$ano,
gestao_municipal$avaliação)
# Teste qui-quadrado para verificar a significância
qui2 <- chisq.test(x = tabela_contingencia)
qui2
# Resíduos padronizados ajustados
qui2$stdres
# Mapa de calor dos resíduos padronizados ajustados
data.frame(qui2$stdres) %>%
rename(perfil = 1,
aplicacao = 2) %>%
ggplot(aes(x = fct_rev(perfil), y = aplicacao,
fill = Freq, label = round(Freq, 3))) +
geom_tile() +
geom_text(size = 5) +
scale_fill_gradient2(low = "white",
mid = "white",
high = "green",
midpoint = 1.96) +
labs(x = 'Perfil', y = 'Aplicação', fill = "Res. Pad. Ajust.") +
coord_flip() +
theme_bw()
# O resultado pode ser obtido por meio da função 'CA' do pacote 'FactoMineR'
anacor <- CA(tabela_contingencia, graph = TRUE)
# Instalação e carregamento dos pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
"knitr", "kableExtra",
"sjPlot",
"FactoMineR",
"amap",
"ade4",
"readxl")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Importando a base de dados
dados_adapta <- read.csv("estudantes_adapta.csv")
# A função para a criação da ACM pede que sejam utilizados "fatores"
dados_adapta <- as.data.frame(unclass(dados_adapta), stringsAsFactors=TRUE)
# Frequências observadas por variável
summary(dados_adapta)
# Tabelas de contingência
sjt.xtab(var.row = dados_adapta$Adaptivity,
var.col = dados_adapta$Education,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_adapta$Adaptivity,
var.col = dados_adapta$Institution,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_adapta$Adaptivity,
var.col = dados_adapta$Financial,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = dados_adapta$Adaptivity,
var.col = dados_adapta$Internet,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
# Criando a ACM
ACM <- dudi.acm(dados_adapta, scannf = FALSE, nf = 3)
# Analisando as variâncias de cada dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
paste0(round(perc_variancia,2),"%")
# Quantidade de categorias por variável
quant_categorias <- apply(dados_adapta,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Consolidando as coordenadas obtidas por meio da matriz binária
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = CS1, y = CS2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# Mapa perceptual em 3D (3 primeiras dimensões)
ACM_3D <- plot_ly()
# Adicionando as coordenadas
ACM_3D <- add_trace(p = ACM_3D,
x = df_ACM$CS1,
y = df_ACM$CS2,
z = df_ACM$CS3,
mode = "text",
text = rownames(df_ACM),
textfont = list(color = "blue"),
marker = list(color = "red"),
showlegend = FALSE)
ACM_3D
# Instalação e carregamento dos pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
"knitr", "kableExtra",
"sjPlot",
"FactoMineR",
"amap",
"readxl",
"gganimate",
"gifski")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Importando a base de dados
enade_2016 <- read_excel("conceito_enade_2016.xlsx")
enade_2021 <- read_excel("conceito_enade_2021.xlsx")
# Vamos excluir o ano e o id
enade_2016 <- enade_2016[,3:4]
enade_2021 <- enade_2021[,3:4]
# Tabelas de contingência para análise da associação entre categorias
sjt.xtab(var.row = enade_2016$Conceito_Enade,
var.col = enade_2016$Categoria_Adm,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
sjt.xtab(var.row = enade_2021$Conceito_Enade,
var.col = enade_2021$Categoria_Adm,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE,
encoding = "UTF-8")
# Gerando as Anacor
tab_cont_2016 <- table(enade_2016$Categoria_Adm, enade_2016$Conceito_Enade)
tab_cont_2021 <- table(enade_2021$Categoria_Adm, enade_2021$Conceito_Enade)
CA_2016 <- CA(tab_cont_2016, graph = F)
CA_2021 <- CA(tab_cont_2021, graph = F)
# Obtendo as coordenadas das categorias das variáveis
coord_2016 <- rbind(CA_2016$row$coord, CA_2016$col$coord)
coord_2021 <- rbind(CA_2021$row$coord, CA_2021$col$coord)
# Quantidade de categorias por variável
quant_categorias_2016 <- apply(enade_2016,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Criando data frame com as coordenadas de 2016
df_CA_2016 <- data.frame(coord_2016[,1:2],
Variável = rep(names(quant_categorias_2016), quant_categorias_2016),
Ano = 2016) %>% rownames_to_column() %>% rename("Categorias" = 1)
# Quantidade de categorias por variável
quant_categorias_2021 <- apply(enade_2021,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Criando data frame com as coordenadas de 2021
df_CA_2021 <- data.frame(coord_2021[,1:2],
Variável = rep(names(quant_categorias_2021), quant_categorias_2021),
Ano = 2021) %>% rownames_to_column() %>% rename("Categorias" = 1)
# Consolidando os data frames
df_CA_total <- rbind(df_CA_2016, df_CA_2021)
# Sobrepondo as coordenadas dos mapas perceptuais em um só plano
df_CA_total %>%
ggplot() +
geom_point(aes(x = Dim.1, y = Dim.2, color = Variável)) +
geom_text_repel(aes(x = Dim.1, y = Dim.2,
label = Categorias,
color = Variável),
max.overlaps = 3000) +
labs(x = "Dimensão 1",
y = "Dimensão 2") +
theme(legend.position = "none") -> mapas_perceptuais
# Definindo que a interação entre os mapas perceptuais se dará por ano
mapa_animado <- mapas_perceptuais + transition_time(Ano) +
enter_fade() +
labs(title = "Ano: {frame_time}") +
exit_fade()
# Estabelecendo um fundo branco para os gráficos
theme_set(theme_light())
# Resultado final
animate(mapa_animado, renderer = gifski_renderer(), fps = 0.7, nframes = 2)
