if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
load(file = "saeb_rend.RData")
load(file = "saeb_rend.RData")
load(file = "saeb_rend.rdata")
#Estatísticas univariadas
summary(saeb_rend)
#Tabela de frequências absolutas das variáveis 'uf' e rede'
table(saeb_rend$uf)
table(saeb_rend$rede)
#Plotando saeb em função de rendimento, com linear fit
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb)) +
geom_point(size = 1, color = "#FDE725FF") +
geom_smooth(method = "lm", formula = y ~ x,
color = "grey40", se = F) +
xlab("rendimento") +
ylab("saeb") +
theme_classic()
)
View(saeb_rend)
#Plotando saeb em função de rendimento, com linear fit
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb)) +
geom_point(size = 1, color = "#FDE725FF") +
geom_smooth(method = "lm", formula = y ~ x,
color = "grey40", se = F) +
xlab("rendimento") +
ylab("saeb") +
theme_classic()
)
#Plotando saeb em função de rendimento, com destaque para rede escolar
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb, color = rede, shape = rede)) +
geom_point(size = 1) +
xlab("rendimento") +
ylab("saeb") +
scale_colour_viridis_d() +
theme_classic()
)
#Plotando saeb em função de rendimento, com destaque para rede escolar e linear fits
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb, color = rede, shape = rede)) +
geom_point(size = 1) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
xlab("rendimento") +
ylab("saeb") +
scale_colour_viridis_d() +
theme_classic()
)
##################################################################################
#                       ESTIMAÇÃO DO MODELO DE REGRESSÃO E                       #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Estimação do modelo
modelosaeb <- lm(formula = saeb ~ rendimento,
data = saeb_rend)
summary(modelosaeb)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb)
saeb_rend_dummies_uf <- dummy_columns(.data = saeb_rend,
select_columns = "uf",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
View(saeb_rend)
View(saeb_rend_dummies_uf)
##################################################################################
#             ESTIMAÇÃO DO MODELO DE REGRESSÃO MÚLTIPLA COM DUMMIES E            #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Modelo considerando as UF's
modelosaeb_dummies_uf <- lm(formula = saeb ~ . -municipio -codigo -escola -rede,
data = saeb_rend_dummies_uf)
summary(modelosaeb_dummies_uf)
load(file = "planosaude.RData")
##################################################################################
#              OBSERVANDO OS DADOS CARREGADOS DA BASE planosaude                 #
##################################################################################
glimpse(planosaude)
load(file = "planosaude.rdata")
load(file = "planosaude.Rdata")
##################################################################################
#              OBSERVANDO OS DADOS CARREGADOS DA BASE planosaude                 #
##################################################################################
glimpse(planosaude)
#Estatísticas univariadas
summary(planosaude)
#Categorias da variável 'plano'
levels(factor(planosaude$plano))
#Tabela de frequências absolutas da variável 'plano'
table(planosaude$plano)
chart.Correlation((planosaude[2:5]), histogram = TRUE)
planosaude_dummies <- dummy_columns(.data = planosaude,
select_columns = "plano",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
#Visualizando a base de dados dummizada
planosaude_dummies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 23)
load(file = "planosaude.Rdata")
##################################################################################
#              OBSERVANDO OS DADOS CARREGADOS DA BASE planosaude                 #
##################################################################################
glimpse(planosaude)
#Estatísticas univariadas
summary(planosaude)
#Categorias da variável 'plano'
levels(factor(planosaude$plano))
#Tabela de frequências absolutas da variável 'plano'
table(planosaude$plano)
chart.Correlation((planosaude[2:5]), histogram = TRUE)
planosaude_dummies <- dummy_columns(.data = planosaude,
select_columns = "plano",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
#Visualizando a base de dados dummizada
planosaude_dummies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 23)
##################################################################################
#                       ESTIMAÇÃO DA REGRESSÃO LINEAR MÚLTIPLA                   #
##################################################################################
#Modelagem com todas as variáveis
modelo_planosaude <- lm(despmed ~ . - id, planosaude_dummies)
View(planosaude_dummies)
##################################################################################
#                       ESTIMAÇÃO DA REGRESSÃO LINEAR MÚLTIPLA                   #
##################################################################################
#Modelagem com todas as variáveis
modelo_planosaude <- lm(despmed ~ . - id, planosaude_dummies)
#Parâmetros do modelo_planosaude
summary(modelo_planosaude)
step_planosaude <- step(modelo_planosaude, k = 3.841459)
summary(step_planosaude)
#Teste de Shapiro-Francia
sf.test(step_planosaude$residuals) #função 'sf.test' do pacote 'nortest'
#Plotando os resíduos do modelo step_planosaude
planosaude %>%
mutate(residuos = step_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(color = "white",
fill = "#55C667FF",
bins = 15,
alpha = 0.6) +
labs(x = "Resíduos",
y = "Frequências") +
theme_bw()
#Acrescentando uma curva normal teórica para comparação entre as distribuições
planosaude %>%
mutate(residuos = step_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#55C667FF",
bins = 15,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_planosaude$residuals),
sd = sd(step_planosaude$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
#Kernel density estimation (KDE) - forma não-paramétrica para estimar a
#função densidade de probabilidade de uma variável aleatória
planosaude_dummies %>%
ggplot() +
geom_density(aes(x = step_planosaude$residuals), fill = "#55C667FF") +
labs(x = "Resíduos do Modelo Stepwise",
y = "Densidade") +
theme_bw()
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(step_planosaude)
#Adicionando fitted values e resíduos do modelo 'step_planosaude'
#no dataset 'planosaude_dummies'
planosaude_dummies$fitted_step <- step_planosaude$fitted.values
planosaude_dummies$residuos_step <- step_planosaude$residuals
#Gráfico que relaciona resíduos e fitted values do modelo 'step_planosaude'
planosaude_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step, y = residuos_step),
color = "#55C667FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise",
y = "Resíduos do Modelo Stepwise") +
theme_bw()
##################################################################################
#                              TRANSFORMAÇÃO DE BOX-COX                          #
##################################################################################
#Para calcular o lambda de Box-Cox
lambda_BC <- powerTransform(planosaude$despmed)
lambda_BC
#Inserindo o lambda de Box-Cox na nova base de dados para a estimação de um
#novo modelo
planosaude_dummies$bcdespmed <- (((planosaude$despmed ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
#Visualizando a nova variável na base de dados
planosaude_dummies %>%
select(id, despmed, bcdespmed, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 14)
#Estimando um novo modelo múltiplo com dummies
modelo_bc_planosaude <- lm(formula = bcdespmed ~ . -id -despmed -fitted_step
-residuos_step,
data = planosaude_dummies)
#Parâmetros do modelo
summary(modelo_bc_planosaude)
#Aplicando o procedimento Stepwise
step_bc_planosaude <- step(modelo_bc_planosaude, k = 3.841459)
summary(step_bc_planosaude)
#Verificando a normalidade dos resíduos do modelo step_bc_planosaude
#Teste de Shapiro-Francia
sf.test(step_bc_planosaude$residuals) #função 'sf.test' do pacote 'nortest'
#Plotando os novos resíduos do modelo step_bc_planosaude com curva normal teórica
planosaude_dummies %>%
mutate(residuos = step_bc_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#440154FF",
bins = 15,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_bc_planosaude$residuals),
sd = sd(step_bc_planosaude$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
#Kernel density estimation (KDE)
planosaude_dummies %>%
ggplot() +
geom_density(aes(x = step_bc_planosaude$residuals), fill = "#440154FF") +
labs(x = "Resíduos do Modelo Stepwise com Transformação de Box-Cox",
y = "Densidade") +
theme_bw()
#Diagnóstico de Heterocedasticidade para o Modelo Stepwise com Box-Cox
ols_test_breusch_pagan(step_bc_planosaude)
#Adicionando fitted values e resíduos do modelo 'step_bc_planosaude'
#no dataset 'planosaude_dummies'
planosaude_dummies$fitted_step_novo <- step_bc_planosaude$fitted.values
planosaude_dummies$residuos_step_novo <- step_bc_planosaude$residuals
#Gráfico que relaciona resíduos e fitted values do modelo 'step_bc_planosaude'
planosaude_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step_novo, y = residuos_step_novo),
color = "#440154FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise com Transformação de Box-Cox",
y = "Resíduos do Modelo Stepwise com Transformação de Box-Cox") +
theme_bw()
load("salarios.RData")
save(salarios, file = "data.RData")
#Estatísticas univariadas
summary(salarios)
##CORRELAÇÃO PERFEITA:
cor(salarios$rh1, salarios$econometria1)
salarios %>% select(2:4) %>%
correlation(method = "pearson") %>%
plot()
modelo1 <- lm(formula = salario ~ rh1 + econometria1,
data = salarios)
summary(modelo1)
##CORRELAÇÃO BAIXA:
cor(salarios$rh3, salarios$econometria3)
salarios %>% select(2,7,8) %>%
correlation(method = "pearson") %>%
plot()
modelo3 <- lm(formula = salario ~ rh3 + econometria3,
data = salarios)
summary(modelo3)
##CORRELAÇÃO MUITO ALTA, PORÉM NÃO PERFEITA:
cor(salarios$rh2, salarios$econometria2)
salarios %>% select(2,5,6) %>%
correlation(method = "pearson") %>%
plot()
modelo2 <- lm(formula = salario ~ rh2 + econometria2,
data = salarios)
summary(modelo2)
save(sab_rend,"test.RData")
save(sab_rend,file ="test.RData")
load(file = "saeb_rend.rdata")
save(sab_rend,file ="test.RData")
save(saeb_rend,file ="test.RData")
##################################################################################
#                       ESTIMAÇÃO DO MODELO DE REGRESSÃO E                       #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Estimação do modelo
modelosaeb <- lm(formula = saeb ~ rendimento,
data = saeb_rend)
summary(modelosaeb)
load(file = "saeb_rend.rdata")
#Estatísticas univariadas
summary(saeb_rend)
#Tabela de frequências absolutas das variáveis 'uf' e rede'
table(saeb_rend$uf)
table(saeb_rend$rede)
#Plotando saeb em função de rendimento, com linear fit
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb)) +
geom_point(size = 1, color = "#FDE725FF") +
geom_smooth(method = "lm", formula = y ~ x,
color = "grey40", se = F) +
xlab("rendimento") +
ylab("saeb") +
theme_classic()
)
##################################################################################
#                       ESTIMAÇÃO DO MODELO DE REGRESSÃO E                       #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Estimação do modelo
modelosaeb <- lm(formula = saeb ~ rendimento,
data = saeb_rend)
summary(modelosaeb)
#Plotando saeb em função de rendimento, com destaque para rede escolar
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb, color = rede, shape = rede)) +
geom_point(size = 1) +
xlab("rendimento") +
ylab("saeb") +
scale_colour_viridis_d() +
theme_classic()
)
#Plotando saeb em função de rendimento, com destaque para rede escolar e linear fits
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb, color = rede, shape = rede)) +
geom_point(size = 1) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
xlab("rendimento") +
ylab("saeb") +
scale_colour_viridis_d() +
theme_classic()
)
##################################################################################
#                       ESTIMAÇÃO DO MODELO DE REGRESSÃO E                       #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Estimação do modelo
modelosaeb <- lm(formula = saeb ~ rendimento,
data = saeb_rend)
summary(modelosaeb)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(step_planosaude)
#Adicionando fitted values e resíduos do modelo 'step_planosaude'
#no dataset 'planosaude_dummies'
planosaude_dummies$fitted_step <- step_planosaude$fitted.values
planosaude_dummies$residuos_step <- step_planosaude$residuals
##################################################################################
#             ESTIMAÇÃO DO MODELO DE REGRESSÃO MÚLTIPLA COM DUMMIES E            #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Modelo considerando as UF's
modelosaeb_dummies_uf <- lm(formula = saeb ~ . -municipio -codigo -escola -rede,
data = saeb_rend_dummies_uf)
##################################################################################
#                       ESTIMAÇÃO DO MODELO DE REGRESSÃO E                       #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Estimação do modelo
modelosaeb <- lm(formula = saeb ~ rendimento,
data = saeb_rend)
summary(modelosaeb)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb)
saeb_rend_dummies_uf <- dummy_columns(.data = saeb_rend,
select_columns = "uf",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
##################################################################################
#             ESTIMAÇÃO DO MODELO DE REGRESSÃO MÚLTIPLA COM DUMMIES E            #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Modelo considerando as UF's
modelosaeb_dummies_uf <- lm(formula = saeb ~ . -municipio -codigo -escola -rede,
data = saeb_rend_dummies_uf)
summary(modelosaeb_dummies_uf)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb_dummies_uf)
#Plotando saeb em função de rendimento, com destaque para UFs e linear fits
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb, color = uf, shape = uf)) +
geom_point(size = 1) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
xlab("rendimento") +
ylab("saeb") +
scale_colour_viridis_d() +
theme_classic()
)
################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
#Listar os arquivos do nosso project
list.files()
#Carregando a base de dados
load(file = "tempodist.rdata")
################################################################################
#                OBSERVANDO OS DADOS CARREGADOS DO DATASET tempodist           #
################################################################################
tempodist %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Visualizando as observações e as especificações referentes às variáveis do dataset
glimpse(tempodist)
#Estatísticas univariadas
summary(tempodist)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplotly(
ggplot(tempodist, aes(x = distancia, y = tempo)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Distância",
y = "Tempo",
title = paste("R²:",
round(((cor(tempodist$tempo, tempodist$distancia))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
)
################################################################################
#           MODELAGEM DE UMA REGRESSÃO LINEAR SIMPLES PARA O EXEMPLO 01        #
################################################################################
#Estimando o modelo
modelo_tempodist <- lm(formula = tempo ~ distancia,
data = tempodist)
#Observando os parâmetros do modelo_tempodist
summary(modelo_tempodist)
################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
load("salarios.RData")
save(salarios, file = "data.RData")
#Estatísticas univariadas
summary(salarios)
##CORRELAÇÃO PERFEITA:
cor(salarios$rh1, salarios$econometria1)
salarios %>% select(2:4) %>%
correlation(method = "pearson") %>%
plot()
modelo1 <- lm(formula = salario ~ rh1 + econometria1,
data = salarios)
summary(modelo1)
##CORRELAÇÃO BAIXA:
cor(salarios$rh3, salarios$econometria3)
salarios %>% select(2,7,8) %>%
correlation(method = "pearson") %>%
plot()
modelo3 <- lm(formula = salario ~ rh3 + econometria3,
data = salarios)
summary(modelo3)
#Diagnóstico de multicolinearidade (Variance Inflation Factor e Tolerance)
ols_vif_tol(modelo3)
##CORRELAÇÃO MUITO ALTA, PORÉM NÃO PERFEITA:
cor(salarios$rh2, salarios$econometria2)
#Diagnóstico de multicolinearidade (Variance Inflation Factor e Tolerance)
ols_vif_tol(modelo3)
